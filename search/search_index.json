{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Bali Unit Testing Framework Bali Unit Testing Framework is a framework for testing code written using VoltScript, the evolution of LotusScript delivered as part of HCL Volt MX Go. The framework can also be used for LotusScript, with modifications (see below on new language functions used). There are deliberately no dependencies on any LotusScript Extensions (LSX, e.g nlsxbe.dll). None should be added, it will make it dependent on a particular implementation. Output can be set as either HTML files, XML files or both. HTML files are designed for your project reporting. The XML files are in standard JUnit format, which your build automation processes (e.g. Jenkins) can leverage to determine whether the build is successful or not. Using BaliUnit for Validation The BaliTestSuite has a suppressReport boolean property, which can be used to prevent report output. The use case for this is to create a BaliTestSuite and use it to validate content within code, e.g. a JSON file. You can set suppressReport = true , then create your tests and check testSuite.ranSuccessfully() to verify all tests were successful. Writing BaliUnit Tests See Writing Units Tests . Core Functions Used Obviously the code runs certain core language functions. If anything is broken for these, the unit testing cannot run. These are documented in Core Functions Project Docs See project docs for class documentation, examples of the HTML and XML reports and the corresponding unit tests. FAQs If unexpected behaviour is occurring, check the FAQs.","title":"Bali Unit Testing Framework"},{"location":"index.html#bali-unit-testing-framework","text":"Bali Unit Testing Framework is a framework for testing code written using VoltScript, the evolution of LotusScript delivered as part of HCL Volt MX Go. The framework can also be used for LotusScript, with modifications (see below on new language functions used). There are deliberately no dependencies on any LotusScript Extensions (LSX, e.g nlsxbe.dll). None should be added, it will make it dependent on a particular implementation. Output can be set as either HTML files, XML files or both. HTML files are designed for your project reporting. The XML files are in standard JUnit format, which your build automation processes (e.g. Jenkins) can leverage to determine whether the build is successful or not.","title":"Bali Unit Testing Framework"},{"location":"index.html#using-baliunit-for-validation","text":"The BaliTestSuite has a suppressReport boolean property, which can be used to prevent report output. The use case for this is to create a BaliTestSuite and use it to validate content within code, e.g. a JSON file. You can set suppressReport = true , then create your tests and check testSuite.ranSuccessfully() to verify all tests were successful.","title":"Using BaliUnit for Validation"},{"location":"index.html#writing-baliunit-tests","text":"See Writing Units Tests .","title":"Writing BaliUnit Tests"},{"location":"index.html#core-functions-used","text":"Obviously the code runs certain core language functions. If anything is broken for these, the unit testing cannot run. These are documented in Core Functions","title":"Core Functions Used"},{"location":"index.html#project-docs","text":"See project docs for class documentation, examples of the HTML and XML reports and the corresponding unit tests.","title":"Project Docs"},{"location":"index.html#faqs","text":"If unexpected behaviour is occurring, check the FAQs.","title":"FAQs"},{"location":"CoreFunctions.html","text":"Core Language Functions Used Core Functions in BaliUnit Script Library %REM and %END REM are used throughout. ' for a single-line comment is also used. When listing keywords, sub/function names where the keyword is used are in brackets. Sub/function location is not used for common functions, datatypes or As. In Declarations the following language keywords are used: Type End Type As String Const Private makeDirsBaliUnit Function This is a function to create directories in a managed way. Language keywords used: Sub End Sub As String On Error GoTo MkDir CurDir Exit Sub If...Then End If Err Error MsgBox Cstr Erl Resume Next Private FormatTimeForOutput Function This is a function to format a date variable. Language keywords used: Function End Function As Variant String Format(Variant of Date Type, String format). String format is yymmddThhnnss AbstractBaliCustomBeforeAfter This is an abstract class and contains no code. Language keywords used: Class End Class Sub End Sub AbstractBaliCustomTester This is a basic class with minimal code. Language keywords used: Class End Class Public As Sub End Sub New Function End Function Set (addBaliUnit) Me (addBaliUnit) Boolean Error (runTests) BaliTestRunner This is the class for outputting a number of HTML files, with an index.html wrapping them. Language keywords used: Class End Class Private Public As List String Variant Sub End Sub New Me Now Delete Call Erase (Delete) Right FullTrim And Set Replace (getFilePath, printoutReport) Integer On Error GoTo (printoutReport) FreeFile (printoutReport) Open (printoutReport) For Output As (printoutReport) Forall...In (printoutReport) End ForAll (printoutReport) Dim (printoutReport) If...Then (printoutReport) ElseIf (printoutReport) Else (printoutReport) End If (printoutReport) Cstr (printoutReport) Print fileNum, String (printoutReport) Close (printoutReport) MsgBox (printoutReport) Error (printoutReport) Err (printoutReport) Erl (printoutReport) Resume (printoutReport) BaliTestSuite This is the class for a set of tests. Language keywords used: Class End Class Public As String Private Integer List Double Boolean Variant Sub End Sub New Me Function End Function Variant Set Delete Now (Delete, checkStarted) On Error GoTo (Delete) If...Then (Delete, checkStarted, convertErrorStack, runBeforeEach, runAfterEach, various assertions) Else (Delete, convertErrorStack, various assertions) End If (Delete, checkStarted, runBeforeEach, runAfterEach, various assertions) Not (Delete, checkStarted, convertErrorStack, runBeforeEach, runAfterEach, various assertions) Is Nothing (Delete, checkStarted, runBeforeEach, runAfterEach) Dim Format(Variant of Date Type, String format). String format is yymmddThhnnss (Delete) Now (Delete) Call Exit Sub (Delete) MsgBox (Delete) Error (Delete) Err (Delete) Erl (Delete) CStr Resume (Delete, assertEqualsPrimitive) While (makeDescriptionUnique) Wend (makeDescriptionUnique) IsElement (makeDescriptionUnique) True (checkStarted, various assertions) * (checkStarted) - (checkStarted) Right FullTrim And Round (duration) IsArray (convertErrorStack, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) For...To (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray) Next (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray) UBound (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) False (various assertions) = (various assertions) <> (various assertions) LCase (assertEqualsString, assertIs, assertIsNot) Long (assertEqualsLong, assertNotEqualLong) Single (assertEqualsSingle, assertNotEqualSingle) IsNumeric (assertEqualsNumeric, assertNotEqualNumeric) CDbl (assertEqualsNumeric, assertNotEqualNumeric, assertEqualsPrimitive) TypeName (assertIs, assertIsNot, assertEqualsPrimitive, assertNotEqualPrimitiveOrPrimitiveArray) On Error ErrNum GoTo (assertEqualsPrimitive) Select (assertEqualsPrimitive) End Select (assertEqualsPrimitive) CBool (assertEqualsPrimitive) CInt (assertEqualsPrimitive) CLng (assertEqualsPrimitive) CSng (assertEqualsPrimitive) Exit Function (assertEqualsPrimitive) ReDim Preserve (processArray) Join (processArray, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) FullTrim (addResult, addError) Try / Catch / Finally ( specific to VoltScript ) GetThreadInfo(12) ( specific to VoltScript ) BaliTestSuiteReport This is the class for writing out an HTML file for a BaliUnit. Language keywords used: Class End Class Private As String Sub End Sub New If...Then (New, printoutReport) Else (New) End If (New, printoutReport) Me Dim (printoutReport) String arrays (printoutReport) Integer On Error GoTo (printoutReport) Forall...In (printoutReport) End ForAll (printoutReport) CStr (printoutReport) FreeFile (printoutReport) Call Replace (printoutReport) Open (printoutReport) For Output As (printoutReport) Print (printoutReport) Close (printoutReport) Exit Sub MsgBox (printoutReport) Error (printoutReport) Err (printoutReport) Erl (printoutReport) Resume (printoutReport)","title":"Core Language Functions Used"},{"location":"CoreFunctions.html#core-language-functions-used","text":"Core Functions in BaliUnit Script Library %REM and %END REM are used throughout. ' for a single-line comment is also used. When listing keywords, sub/function names where the keyword is used are in brackets. Sub/function location is not used for common functions, datatypes or As. In Declarations the following language keywords are used: Type End Type As String Const","title":"Core Language Functions Used"},{"location":"CoreFunctions.html#private-makedirsbaliunit-function","text":"This is a function to create directories in a managed way. Language keywords used: Sub End Sub As String On Error GoTo MkDir CurDir Exit Sub If...Then End If Err Error MsgBox Cstr Erl Resume Next","title":"Private makeDirsBaliUnit Function"},{"location":"CoreFunctions.html#private-formattimeforoutput-function","text":"This is a function to format a date variable. Language keywords used: Function End Function As Variant String Format(Variant of Date Type, String format). String format is yymmddThhnnss","title":"Private FormatTimeForOutput Function"},{"location":"CoreFunctions.html#abstractbalicustombeforeafter","text":"This is an abstract class and contains no code. Language keywords used: Class End Class Sub End Sub","title":"AbstractBaliCustomBeforeAfter"},{"location":"CoreFunctions.html#abstractbalicustomtester","text":"This is a basic class with minimal code. Language keywords used: Class End Class Public As Sub End Sub New Function End Function Set (addBaliUnit) Me (addBaliUnit) Boolean Error (runTests)","title":"AbstractBaliCustomTester"},{"location":"CoreFunctions.html#balitestrunner","text":"This is the class for outputting a number of HTML files, with an index.html wrapping them. Language keywords used: Class End Class Private Public As List String Variant Sub End Sub New Me Now Delete Call Erase (Delete) Right FullTrim And Set Replace (getFilePath, printoutReport) Integer On Error GoTo (printoutReport) FreeFile (printoutReport) Open (printoutReport) For Output As (printoutReport) Forall...In (printoutReport) End ForAll (printoutReport) Dim (printoutReport) If...Then (printoutReport) ElseIf (printoutReport) Else (printoutReport) End If (printoutReport) Cstr (printoutReport) Print fileNum, String (printoutReport) Close (printoutReport) MsgBox (printoutReport) Error (printoutReport) Err (printoutReport) Erl (printoutReport) Resume (printoutReport)","title":"BaliTestRunner"},{"location":"CoreFunctions.html#balitestsuite","text":"This is the class for a set of tests. Language keywords used: Class End Class Public As String Private Integer List Double Boolean Variant Sub End Sub New Me Function End Function Variant Set Delete Now (Delete, checkStarted) On Error GoTo (Delete) If...Then (Delete, checkStarted, convertErrorStack, runBeforeEach, runAfterEach, various assertions) Else (Delete, convertErrorStack, various assertions) End If (Delete, checkStarted, runBeforeEach, runAfterEach, various assertions) Not (Delete, checkStarted, convertErrorStack, runBeforeEach, runAfterEach, various assertions) Is Nothing (Delete, checkStarted, runBeforeEach, runAfterEach) Dim Format(Variant of Date Type, String format). String format is yymmddThhnnss (Delete) Now (Delete) Call Exit Sub (Delete) MsgBox (Delete) Error (Delete) Err (Delete) Erl (Delete) CStr Resume (Delete, assertEqualsPrimitive) While (makeDescriptionUnique) Wend (makeDescriptionUnique) IsElement (makeDescriptionUnique) True (checkStarted, various assertions) * (checkStarted) - (checkStarted) Right FullTrim And Round (duration) IsArray (convertErrorStack, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) For...To (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray) Next (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray) UBound (convertErrorStack, processArray, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) False (various assertions) = (various assertions) <> (various assertions) LCase (assertEqualsString, assertIs, assertIsNot) Long (assertEqualsLong, assertNotEqualLong) Single (assertEqualsSingle, assertNotEqualSingle) IsNumeric (assertEqualsNumeric, assertNotEqualNumeric) CDbl (assertEqualsNumeric, assertNotEqualNumeric, assertEqualsPrimitive) TypeName (assertIs, assertIsNot, assertEqualsPrimitive, assertNotEqualPrimitiveOrPrimitiveArray) On Error ErrNum GoTo (assertEqualsPrimitive) Select (assertEqualsPrimitive) End Select (assertEqualsPrimitive) CBool (assertEqualsPrimitive) CInt (assertEqualsPrimitive) CLng (assertEqualsPrimitive) CSng (assertEqualsPrimitive) Exit Function (assertEqualsPrimitive) ReDim Preserve (processArray) Join (processArray, assertNotEqualPrimitiveOrPrimitiveArray, testArrays) FullTrim (addResult, addError) Try / Catch / Finally ( specific to VoltScript ) GetThreadInfo(12) ( specific to VoltScript )","title":"BaliTestSuite"},{"location":"CoreFunctions.html#balitestsuitereport","text":"This is the class for writing out an HTML file for a BaliUnit. Language keywords used: Class End Class Private As String Sub End Sub New If...Then (New, printoutReport) Else (New) End If (New, printoutReport) Me Dim (printoutReport) String arrays (printoutReport) Integer On Error GoTo (printoutReport) Forall...In (printoutReport) End ForAll (printoutReport) CStr (printoutReport) FreeFile (printoutReport) Call Replace (printoutReport) Open (printoutReport) For Output As (printoutReport) Print (printoutReport) Close (printoutReport) Exit Sub MsgBox (printoutReport) Error (printoutReport) Err (printoutReport) Erl (printoutReport) Resume (printoutReport)","title":"BaliTestSuiteReport"},{"location":"FAQs.html","text":"FAQs Where do I find the output? The output will, by default, be in a \"unit-test-reports\" directory (defined by the BASE_REPORT_LOC constant in BaliTestRunner.bss) under the directory of the program running the tests. How do I change the output directory? If you wish to change the output directory for every test runner using the script, change the BASE_REPORT_LOC constant. If you wish to change the output directory for a single set of tests: If using a BaliTestRunner, call BaliTestRunner.outputTo() . If just using a BaliTestSuite independent of a test runner, call BaliTestSuite.outputTo() . I set outputTo for a TestSuite, but it's not working? Has the test suite been added to a BaliTestRunner? If so, the location for the BaliTestRunner overrides any setting in the test suite - otherwise the index.html won't map to the test suite's output! I'm using a BaliTestRunner, but the BaliTestSuite's output is not in the BaliTestRunner's subdirectory The usual cause is omitting to call BaliTestRunner.addTestSuite() . What are missing assertions? This means you have called describe() but a corresponding assertion - or call to addResult() or addError() - has not been included. This could be because other code after the describe() call has generated an error and needs fixing. I am using a CustomBeforeAfter, but the assertion is not taking into account the value from the beforeEach() Make sure your code is not running a function that modifies a value being modified in the beforeEach, e.g. assertEqualsDouble(f, CDbl(a)) , where a is incremented in the beforeEach() . In the above line, the order of processing would be: CDbl(a) Call to assertion. Run beforeEach() , incrementing a. Run assertion. If the beforeEach() is a pure function - i.e. it just instantiates dummy data and does not modify any global variables - you could manually call beforeEach() before modifying the value that you are passing into the assertion. Alternatively. just compare against the value before the beforeEach() has run. What is Recommended Best Practice for Test Suites? In personal experience, creating a separate function for each BaliTestSuite gives greatest clarity. It also allows aborting a run if a key BaliTestSuite fails. Each BaliTestSuite is usually designed to test a specific process or self-contained aspect of the code or application. BaliTestSuites for unit tests and integration tests are typically also separated. Unit tests are used to test functions that do not depend on specific environmental aspects - specific users, specific data etc. In other technologies, unit tests will also include mocking . Integration tests are used to test code that requires specific data to be available, specific user access to be in place, real-world testing of external systems etc. How Can We Mock Data or Users? Before/After code can create data specifically for testing - these would then become integration tests. Java has Mockito framework, because sub-classing is always possible and API calls can be intercepted. That is not an option here. From experience, BaliTestSuite functions are best written in the same file as the functions being tested. The same approach is used for Rust and has the added benefit of documenting how the functions are intended to be used. If non-LSX custom classes are used as parameters, this may allow sub-classing with a mocked object to test a complete function. More commonly, branching logic needs to be added to the functions to route differently if the callee is a test. If the tests are in the same file as the functions being called, private variables can be used to determine if a test is being run or determine if an error should be thrown. Testing Means I Have to Write My Functions Differently Yes, it probably will. Writing code is one thing, writing testable code is a completely different beast, and not specific to any one language. It's not hard to find articles written about this.","title":"FAQs"},{"location":"FAQs.html#faqs","text":"","title":"FAQs"},{"location":"FAQs.html#where-do-i-find-the-output","text":"The output will, by default, be in a \"unit-test-reports\" directory (defined by the BASE_REPORT_LOC constant in BaliTestRunner.bss) under the directory of the program running the tests.","title":"Where do I find the output?"},{"location":"FAQs.html#how-do-i-change-the-output-directory","text":"If you wish to change the output directory for every test runner using the script, change the BASE_REPORT_LOC constant. If you wish to change the output directory for a single set of tests: If using a BaliTestRunner, call BaliTestRunner.outputTo() . If just using a BaliTestSuite independent of a test runner, call BaliTestSuite.outputTo() .","title":"How do I change the output directory?"},{"location":"FAQs.html#i-set-outputto-for-a-testsuite-but-its-not-working","text":"Has the test suite been added to a BaliTestRunner? If so, the location for the BaliTestRunner overrides any setting in the test suite - otherwise the index.html won't map to the test suite's output!","title":"I set outputTo for a TestSuite, but it's not working?"},{"location":"FAQs.html#im-using-a-balitestrunner-but-the-balitestsuites-output-is-not-in-the-balitestrunners-subdirectory","text":"The usual cause is omitting to call BaliTestRunner.addTestSuite() .","title":"I'm using a BaliTestRunner, but the BaliTestSuite's output is not in the BaliTestRunner's subdirectory"},{"location":"FAQs.html#what-are-missing-assertions","text":"This means you have called describe() but a corresponding assertion - or call to addResult() or addError() - has not been included. This could be because other code after the describe() call has generated an error and needs fixing.","title":"What are missing assertions?"},{"location":"FAQs.html#i-am-using-a-custombeforeafter-but-the-assertion-is-not-taking-into-account-the-value-from-the-beforeeach","text":"Make sure your code is not running a function that modifies a value being modified in the beforeEach, e.g. assertEqualsDouble(f, CDbl(a)) , where a is incremented in the beforeEach() . In the above line, the order of processing would be: CDbl(a) Call to assertion. Run beforeEach() , incrementing a. Run assertion. If the beforeEach() is a pure function - i.e. it just instantiates dummy data and does not modify any global variables - you could manually call beforeEach() before modifying the value that you are passing into the assertion. Alternatively. just compare against the value before the beforeEach() has run.","title":"I am using a CustomBeforeAfter, but the assertion is not taking into account the value from the beforeEach()"},{"location":"FAQs.html#what-is-recommended-best-practice-for-test-suites","text":"In personal experience, creating a separate function for each BaliTestSuite gives greatest clarity. It also allows aborting a run if a key BaliTestSuite fails. Each BaliTestSuite is usually designed to test a specific process or self-contained aspect of the code or application. BaliTestSuites for unit tests and integration tests are typically also separated. Unit tests are used to test functions that do not depend on specific environmental aspects - specific users, specific data etc. In other technologies, unit tests will also include mocking . Integration tests are used to test code that requires specific data to be available, specific user access to be in place, real-world testing of external systems etc.","title":"What is Recommended Best Practice for Test Suites?"},{"location":"FAQs.html#how-can-we-mock-data-or-users","text":"Before/After code can create data specifically for testing - these would then become integration tests. Java has Mockito framework, because sub-classing is always possible and API calls can be intercepted. That is not an option here. From experience, BaliTestSuite functions are best written in the same file as the functions being tested. The same approach is used for Rust and has the added benefit of documenting how the functions are intended to be used. If non-LSX custom classes are used as parameters, this may allow sub-classing with a mocked object to test a complete function. More commonly, branching logic needs to be added to the functions to route differently if the callee is a test. If the tests are in the same file as the functions being called, private variables can be used to determine if a test is being run or determine if an error should be thrown.","title":"How Can We Mock Data or Users?"},{"location":"FAQs.html#testing-means-i-have-to-write-my-functions-differently","text":"Yes, it probably will. Writing code is one thing, writing testable code is a completely different beast, and not specific to any one language. It's not hard to find articles written about this.","title":"Testing Means I Have to Write My Functions Differently"},{"location":"Writing-Unit-Tests/index.html","text":"Writing Unit Tests There are two hierarchies: BaliTestRunner for aggregating multiple test suites. The default output format is HTML. This will output multiple HTML files, one for each test suite, with an index.html to bootstrap them. If the output format is set to \"XML\", a single XML file file is generated in JUnit format. This can be used by Jenkins. The output format can be set to \"BOTH\" to output HTML and XML files. BaliTestSuite for creating a single test suite containing multiple tests. If it has not been added to a BaliTestRunner, a standalone HTML file will be created. This is an easy mistake to make and if your HTML file is not where you expect, this could be the cause! BaliTestRunner - Multiple HTML Files aggregated with index.html Simple Example uses this approach. Add Use \"BaliTestRunner\" to incorporate the Bali Unit Test script. Declare a New BaliTestRunner to aggregate all test suites, passing a label. This will be combined with the run-time timestamp for the directory name containing the HTML files, in format \"MyTitle-20220331T123000\". Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters, best practice is to use only alphanumeric characters. The files will be placed in the sub-directory unit-test-reports under the run context. The output location can be overridden using the outputTo() function. Changing this at the BaliTestRunner will filter down to all BaliTestSuites added to the BaliTestRunner. For best clarity, a separate function is used for each test suite, with the test runner passed as an argument to each function. Instantiate a BaliTestSuite object, passing a name for the tests. This will be used for the filename of the HTML file, in format MyTests.html. The file will be in the same directory as the index.html. Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters, best practice is to use only alphanumeric characters. Add the BaliTestSuite object to the BaliTestRunner object, using MyBaliTestRunner.addTestSuite(MyBaliTestSuite) . As an alternative to steps 5 and 6, there is a method BaliTestRunner.createTestSuite(\"Test Title\") , which will return a newly-created BaliTestSuite object. Standalone BaliTestSuite HTML File Output SimpleBeforeAfterTester uses this approach. Add Use \"BaliTestSuite\" to create a set of tests. Instantiate the BaliTestSuite object, passing a name for the tests. This will be combined with the run-time timestamp for the filename of the HTML file, in format \"MyTests-20220331T123000.html\". Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters. The output location can be overridden using the outputTo() function. Writing Tests Write your tests using syntax Call BaliTestSuite.describe(|My Test Name|).assertTrue(True) . For assertions available, see assertions in BaliTestSuite class documentation documentation. All assertions have error handling in-built and will give a full stack trace for VoltScript. Each assertion returns a true / false for success, which can be utilised, if required. After all tests have been run, the BaliTestSuite has a ranSuccessfully() function that returns a boolean to identify if all tests ran successfully. If you want to access the results, these are in a results List, where the label is the test name (corrected as appropriate for uniqueness). Location of Unit / Integration Tests In experience, test suites are best written as functions in the same script as the functions they are testing. This allows use of private variables e.g. to mock actual objects, route logic differently, write errors elsewhere etc. A separate unit test / integration script can be used to trigger the test functions. Class APIs For more details of classes etc in use, see BaliDoc .","title":"Writing Unit Tests"},{"location":"Writing-Unit-Tests/index.html#writing-unit-tests","text":"There are two hierarchies: BaliTestRunner for aggregating multiple test suites. The default output format is HTML. This will output multiple HTML files, one for each test suite, with an index.html to bootstrap them. If the output format is set to \"XML\", a single XML file file is generated in JUnit format. This can be used by Jenkins. The output format can be set to \"BOTH\" to output HTML and XML files. BaliTestSuite for creating a single test suite containing multiple tests. If it has not been added to a BaliTestRunner, a standalone HTML file will be created. This is an easy mistake to make and if your HTML file is not where you expect, this could be the cause!","title":"Writing Unit Tests"},{"location":"Writing-Unit-Tests/index.html#balitestrunner-multiple-html-files-aggregated-with-indexhtml","text":"Simple Example uses this approach. Add Use \"BaliTestRunner\" to incorporate the Bali Unit Test script. Declare a New BaliTestRunner to aggregate all test suites, passing a label. This will be combined with the run-time timestamp for the directory name containing the HTML files, in format \"MyTitle-20220331T123000\". Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters, best practice is to use only alphanumeric characters. The files will be placed in the sub-directory unit-test-reports under the run context. The output location can be overridden using the outputTo() function. Changing this at the BaliTestRunner will filter down to all BaliTestSuites added to the BaliTestRunner. For best clarity, a separate function is used for each test suite, with the test runner passed as an argument to each function. Instantiate a BaliTestSuite object, passing a name for the tests. This will be used for the filename of the HTML file, in format MyTests.html. The file will be in the same directory as the index.html. Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters, best practice is to use only alphanumeric characters. Add the BaliTestSuite object to the BaliTestRunner object, using MyBaliTestRunner.addTestSuite(MyBaliTestSuite) . As an alternative to steps 5 and 6, there is a method BaliTestRunner.createTestSuite(\"Test Title\") , which will return a newly-created BaliTestSuite object.","title":"BaliTestRunner - Multiple HTML Files aggregated with index.html"},{"location":"Writing-Unit-Tests/index.html#standalone-balitestsuite-html-file-output","text":"SimpleBeforeAfterTester uses this approach. Add Use \"BaliTestSuite\" to create a set of tests. Instantiate the BaliTestSuite object, passing a name for the tests. This will be combined with the run-time timestamp for the filename of the HTML file, in format \"MyTests-20220331T123000.html\". Spaces will be removed, but no other modifications to the title - it is the developer's responsibility to ensure no invalid characters. The output location can be overridden using the outputTo() function.","title":"Standalone BaliTestSuite HTML File Output"},{"location":"Writing-Unit-Tests/index.html#writing-tests","text":"Write your tests using syntax Call BaliTestSuite.describe(|My Test Name|).assertTrue(True) . For assertions available, see assertions in BaliTestSuite class documentation documentation. All assertions have error handling in-built and will give a full stack trace for VoltScript. Each assertion returns a true / false for success, which can be utilised, if required. After all tests have been run, the BaliTestSuite has a ranSuccessfully() function that returns a boolean to identify if all tests ran successfully. If you want to access the results, these are in a results List, where the label is the test name (corrected as appropriate for uniqueness).","title":"Writing Tests"},{"location":"Writing-Unit-Tests/index.html#location-of-unit-integration-tests","text":"In experience, test suites are best written as functions in the same script as the functions they are testing. This allows use of private variables e.g. to mock actual objects, route logic differently, write errors elsewhere etc. A separate unit test / integration script can be used to trigger the test functions.","title":"Location of Unit / Integration Tests"},{"location":"Writing-Unit-Tests/index.html#class-apis","text":"For more details of classes etc in use, see BaliDoc .","title":"Class APIs"},{"location":"Writing-Unit-Tests/1-simple.html","text":"Simple Example 1 2 3 4 5 6 7 8 9 10 11 12 13 Dim testRunner As New BaliTestRunner ( \"Sample Tests\" ) Dim testSuite1 As New BaliTestSuite ( \"Test Suite 1\" ) Dim testSuite2 As NEW BaliTestSuite ( \"Test Suite 2\" ) Dim x as Integer Call testRunner . addTestSuite ( testSuite1 ) Call testSuite1 . describe ( \"Test x = False\" ). assertFalse ( x ) x = - 1 Call testSuite1 . describe ( \"Test x = True\" ). assertTrue ( x ) Call testRunner . addTestSuite ( testSuite2 ) Call testSuite2 . describe ( \"Test x = -1\" ). assertEqualsInteger ( - 1 , x ) Call testSuite2 . describe ( \"Test x less than 0\" ). assertIsLessThan ( 0 , x ) In line 1 we create a BaliTestRunner to hold our tests. In lines 2 and 3 we create two test suites. In line 6 we add the first BaliTestSuite to the test runner. Then in the following lines we add tests. describe() is a fluent function that returns the testSuite1 variable. So we can call describe() and the subsequent assertion on the same line. Here we just use a basic boolean assertion. In line 11 we add the second BaliTestSuite to the test runner. In line 12 we use an integer assertion and in line 13 assert that x is less than 0. Note that when using other numeric assertions and literal values, you may need to use the relevant conversion function (e.g. CLng() ). When using assertions that take an expected value, the order is always expected as the first parameter and actual as the second. A more thorough example can be found in BasicTester .","title":"Simple Example"},{"location":"Writing-Unit-Tests/1-simple.html#simple-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 Dim testRunner As New BaliTestRunner ( \"Sample Tests\" ) Dim testSuite1 As New BaliTestSuite ( \"Test Suite 1\" ) Dim testSuite2 As NEW BaliTestSuite ( \"Test Suite 2\" ) Dim x as Integer Call testRunner . addTestSuite ( testSuite1 ) Call testSuite1 . describe ( \"Test x = False\" ). assertFalse ( x ) x = - 1 Call testSuite1 . describe ( \"Test x = True\" ). assertTrue ( x ) Call testRunner . addTestSuite ( testSuite2 ) Call testSuite2 . describe ( \"Test x = -1\" ). assertEqualsInteger ( - 1 , x ) Call testSuite2 . describe ( \"Test x less than 0\" ). assertIsLessThan ( 0 , x ) In line 1 we create a BaliTestRunner to hold our tests. In lines 2 and 3 we create two test suites. In line 6 we add the first BaliTestSuite to the test runner. Then in the following lines we add tests. describe() is a fluent function that returns the testSuite1 variable. So we can call describe() and the subsequent assertion on the same line. Here we just use a basic boolean assertion. In line 11 we add the second BaliTestSuite to the test runner. In line 12 we use an integer assertion and in line 13 assert that x is less than 0. Note that when using other numeric assertions and literal values, you may need to use the relevant conversion function (e.g. CLng() ). When using assertions that take an expected value, the order is always expected as the first parameter and actual as the second. A more thorough example can be found in BasicTester .","title":"Simple Example"},{"location":"Writing-Unit-Tests/2-BeforeAfterTester.html","text":"SampleBeforeAfterTester The full code can be found in SampleBeforeAfterTester . BeforeAfter Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter Sub beforeAll () a = 0 b = 0 End Sub Sub beforeEach () a ++ End Sub Sub afterEach () b ++ End Sub Sub afterAll () Print | a is | & a & | , b is | & b End Sub End Class This CustomBeforeAfterTester uses all four methods. The variables a and b are not declared in the class, because they are needed in the actual tests. As a result, they are declared as global private variables. The beforeAll() method starting at line 3 is only for explicit instantiation of the integers. If not explicitly set, they will be 0 anyway. In the beforeEach() method starting at line 8 we increment a . In the afterEach() method starting at line 12 we increment b . Finally, we use the afterAll to print out a and b . Test Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Dim testSuite As New BaliTestSuite ( | Custom BeforeAfter Tester | ) Dim beforeAfter As New IntegerIncrementBeforeAfter Call testSuite . addCustomBeforeAfter ( beforeAfter ) 'a = 1, b = 0 testSuite . describe ( | Test b is false | ). assertFalse ( b ) 'a = 2, b = 1 Call testSuite . describe ( | Test a equals 2 | ). assertEqualsInteger ( 2 , a ) 'a = 3, b = 2 Call testSuite . describe ( | Test b equals 2 primitive | ). assertEqualsPrimitive ( 2 , b ) 'a = 4, b = 3 Dim f As Double f = 3.0 Call testSuite . describe ( | Test CDbl ( b ) = 3.0 | ). assertEqualsDouble ( f , CDbl ( b )) 'a = 5, b = 4 Dim c As Single c = 4 Call testSuite . describe ( | Test CSngl ( b ) = 4 | ). assertEqualsSingle ( c , CSng ( b )) 'a = 6, b = 5 Dim d As Long d = 5 Call testSuite . describe ( | Test CLng ( b ) = 5 | ). assertEqualsLong ( d , CLng ( b )) 'a = 7, b = 6 Dim e As Integer e = b + 1 Call testSuite . describe ( | Test a numeric = b + 1 | ). assertEqualsNumeric ( e , a ) In line 1 we just create a BaliTestSuite without a BaliTestRunner, because we are only running a single test suite. In line 2 we create a instance of the custom BeforeAfter class, and in line 4 we add it to the test suite. Now we are ready to start running tests. Many of the tests are straightforward, but some deserve further comment. On lines 16 and 17 we create a double to pass to the assertEqualsDouble() . This is because we cannot just pass 3.0 . We could use assertEqualsNumeric() , which proxies off to assertEqualsDouble() , but on this occasion we're using the lower level assertion. Note on line 18 we compare b . If we were to test a , we would need to expect the value to be 3 , not 4 . This is because, although the CDbl() function is inside the assertion, it is executed before the assertion - and thus before the beforeEach() is triggered. The result of the executation passed to the assertion, at which point the beforeEach() will run. As a result, for ease of fourth-dimensional thinking, we just compare against the value modified in the afterEach() function.","title":"SampleBeforeAfterTester"},{"location":"Writing-Unit-Tests/2-BeforeAfterTester.html#samplebeforeaftertester","text":"The full code can be found in SampleBeforeAfterTester .","title":"SampleBeforeAfterTester"},{"location":"Writing-Unit-Tests/2-BeforeAfterTester.html#beforeafter-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter Sub beforeAll () a = 0 b = 0 End Sub Sub beforeEach () a ++ End Sub Sub afterEach () b ++ End Sub Sub afterAll () Print | a is | & a & | , b is | & b End Sub End Class This CustomBeforeAfterTester uses all four methods. The variables a and b are not declared in the class, because they are needed in the actual tests. As a result, they are declared as global private variables. The beforeAll() method starting at line 3 is only for explicit instantiation of the integers. If not explicitly set, they will be 0 anyway. In the beforeEach() method starting at line 8 we increment a . In the afterEach() method starting at line 12 we increment b . Finally, we use the afterAll to print out a and b .","title":"BeforeAfter Code"},{"location":"Writing-Unit-Tests/2-BeforeAfterTester.html#test-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Dim testSuite As New BaliTestSuite ( | Custom BeforeAfter Tester | ) Dim beforeAfter As New IntegerIncrementBeforeAfter Call testSuite . addCustomBeforeAfter ( beforeAfter ) 'a = 1, b = 0 testSuite . describe ( | Test b is false | ). assertFalse ( b ) 'a = 2, b = 1 Call testSuite . describe ( | Test a equals 2 | ). assertEqualsInteger ( 2 , a ) 'a = 3, b = 2 Call testSuite . describe ( | Test b equals 2 primitive | ). assertEqualsPrimitive ( 2 , b ) 'a = 4, b = 3 Dim f As Double f = 3.0 Call testSuite . describe ( | Test CDbl ( b ) = 3.0 | ). assertEqualsDouble ( f , CDbl ( b )) 'a = 5, b = 4 Dim c As Single c = 4 Call testSuite . describe ( | Test CSngl ( b ) = 4 | ). assertEqualsSingle ( c , CSng ( b )) 'a = 6, b = 5 Dim d As Long d = 5 Call testSuite . describe ( | Test CLng ( b ) = 5 | ). assertEqualsLong ( d , CLng ( b )) 'a = 7, b = 6 Dim e As Integer e = b + 1 Call testSuite . describe ( | Test a numeric = b + 1 | ). assertEqualsNumeric ( e , a ) In line 1 we just create a BaliTestSuite without a BaliTestRunner, because we are only running a single test suite. In line 2 we create a instance of the custom BeforeAfter class, and in line 4 we add it to the test suite. Now we are ready to start running tests. Many of the tests are straightforward, but some deserve further comment. On lines 16 and 17 we create a double to pass to the assertEqualsDouble() . This is because we cannot just pass 3.0 . We could use assertEqualsNumeric() , which proxies off to assertEqualsDouble() , but on this occasion we're using the lower level assertion. Note on line 18 we compare b . If we were to test a , we would need to expect the value to be 3 , not 4 . This is because, although the CDbl() function is inside the assertion, it is executed before the assertion - and thus before the beforeEach() is triggered. The result of the executation passed to the assertion, at which point the beforeEach() will run. As a result, for ease of fourth-dimensional thinking, we just compare against the value modified in the afterEach() function.","title":"Test Code"},{"location":"Writing-Unit-Tests/3-validation.html","text":"BaliUnit for Validation Imagine we have the following class: Class Person Public firstName as String Public lastName as String Public age as Integer Sub New () End Sub End Class We may want to validate that a Person has been set up correctly, because properties are not set and validated during the constructor. Setting up Person Dim person as New Person () person . firstName = \"John\" person . lastName = \"Doe\" person . age = 42 We will create the Person and set property values, ready for validation. In reality, this might be a JSON object received or a VoltScript object pre-populated outside the script that wants to validate it. Test Code 1 2 3 4 5 6 7 Dim testSuite as New BaliTestSuite ( \"Validator\" ) testSuite . suppressReport = True Call testSuite . describe ( \"fname\" ). assertNotEqualString ( \"\" , person . firstName ) Call testSuite . describe ( \"lname\" ). assertNotEqualString ( \"\" , person . lastName ) Call testSuite . describe ( \"age > 0\" ). assertIsGreaterThan ( 0.0 , CDbl ( person . age )) Call testSuite . describe ( \"age > 0 alt\" ). assertTrue ( person . age > 0 ) Call testSuite . describe ( \"age sensible\" ). assertTrue ( person . age < 110 ) We need to pass a name to the BaliTestSuite in line 1, even though it's not being used. The key is line 2, where we suppress the report. If we did not, when the code finishes and the BaliTestSuite is deleted, the HTML reports would be generated - unnecessarily. In lines 3 - 8 we run the tests. Age is an integer, so could potentially be a negative integer, or much bigger than the age a person could be. Checking The Validation Ran 1 2 3 4 5 6 7 8 9 10 11 If testSuite . ranSuccessfully () Then Print \"Person valid\" Else errMsg = \"Person not valid\" ForAll test in testSuite . results If ( test . outcome <> \"Passed\" ) Then errMsg = errMsg & Chr ( 10 ) & ListTag ( test ) & \": \" & test . errorMsg End If End ForAll Error 1001 , errMsg End If Checking validation worked is straightforward and done by calling the ranSuccessfully() function in line 1. If it wasn't successful, you want to identify what went wrong. This is done in lines 5 - 9. We loop through the results, which gives us access to the TestCase object. If the outcome was not \"Passed\", we capture the reason - the TestCase's errorMsg. This would be something like \"Expected: 1, but was: 3\".","title":"BaliUnit for Validation"},{"location":"Writing-Unit-Tests/3-validation.html#baliunit-for-validation","text":"Imagine we have the following class: Class Person Public firstName as String Public lastName as String Public age as Integer Sub New () End Sub End Class We may want to validate that a Person has been set up correctly, because properties are not set and validated during the constructor.","title":"BaliUnit for Validation"},{"location":"Writing-Unit-Tests/3-validation.html#setting-up-person","text":"Dim person as New Person () person . firstName = \"John\" person . lastName = \"Doe\" person . age = 42 We will create the Person and set property values, ready for validation. In reality, this might be a JSON object received or a VoltScript object pre-populated outside the script that wants to validate it.","title":"Setting up Person"},{"location":"Writing-Unit-Tests/3-validation.html#test-code","text":"1 2 3 4 5 6 7 Dim testSuite as New BaliTestSuite ( \"Validator\" ) testSuite . suppressReport = True Call testSuite . describe ( \"fname\" ). assertNotEqualString ( \"\" , person . firstName ) Call testSuite . describe ( \"lname\" ). assertNotEqualString ( \"\" , person . lastName ) Call testSuite . describe ( \"age > 0\" ). assertIsGreaterThan ( 0.0 , CDbl ( person . age )) Call testSuite . describe ( \"age > 0 alt\" ). assertTrue ( person . age > 0 ) Call testSuite . describe ( \"age sensible\" ). assertTrue ( person . age < 110 ) We need to pass a name to the BaliTestSuite in line 1, even though it's not being used. The key is line 2, where we suppress the report. If we did not, when the code finishes and the BaliTestSuite is deleted, the HTML reports would be generated - unnecessarily. In lines 3 - 8 we run the tests. Age is an integer, so could potentially be a negative integer, or much bigger than the age a person could be.","title":"Test Code"},{"location":"Writing-Unit-Tests/3-validation.html#checking-the-validation-ran","text":"1 2 3 4 5 6 7 8 9 10 11 If testSuite . ranSuccessfully () Then Print \"Person valid\" Else errMsg = \"Person not valid\" ForAll test in testSuite . results If ( test . outcome <> \"Passed\" ) Then errMsg = errMsg & Chr ( 10 ) & ListTag ( test ) & \": \" & test . errorMsg End If End ForAll Error 1001 , errMsg End If Checking validation worked is straightforward and done by calling the ranSuccessfully() function in line 1. If it wasn't successful, you want to identify what went wrong. This is done in lines 5 - 9. We loop through the results, which gives us access to the TestCase object. If the outcome was not \"Passed\", we capture the reason - the TestCase's errorMsg. This would be something like \"Expected: 1, but was: 3\".","title":"Checking The Validation Ran"},{"location":"Writing-Unit-Tests/4-untestable-to-testable.html","text":"From Untestable Code to Testable Functions may need to be changed or written differently. It's easy to convert an example on a blog post about writing testable code for VoltScript. Imagine the following function: Function getTimeOfDay () as String Dim nowTime as Variant nowTime = Now () If ( Hour ( Now ) < 8 ) Then getTimeOfDay = \"Night\" ElseIf ( Hour ( Now ) < 12 ) Then getTimeOfDay = \"Morning\" ElseIf ( Hour ( Now ) < 6 ) Then getTimeOfDay = \"Afternoon\" Else getTimeOfDay = \"Night\" End If End Function This function is untestable, unless you are willing to test at multiple times of day or change the system time. Rewriting the function slightly can make it eminently testable: Function getTimeOfDay ( nowTime as Variant ) as String nowTime = Now () If ( Hour ( Now ) < 8 ) Then getTimeOfDay = \"Night\" ElseIf ( Hour ( Now ) < 12 ) Then getTimeOfDay = \"Morning\" ElseIf ( Hour ( Now ) < 6 ) Then getTimeOfDay = \"Afternoon\" Else getTimeOfDay = \"Night\" End If End Function Now it can be tested easily: Dim testSuite as New BaliTestSuite(\"Testing time of day\") Dim nowTime as Variant nowTime = TimeNumber(4,30,04) ' Fine because we're only interested in the time Call testSuite.describe(\"Test Night am\").assertEqualsString(\"Night\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(8,30,04) Call testSuite.describe(\"Test Morning\").assertEqualsString(\"Morning\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(13,30,04) Call testSuite.describe(\"Test Afternoon\").assertEqualsString(\"Afternoon\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(20,30,04) Call testSuite.describe(\"Test Night pm\").assertEqualsString(\"Night\", getTimeOfDay(nowTime), True)","title":"From Untestable Code to Testable"},{"location":"Writing-Unit-Tests/4-untestable-to-testable.html#from-untestable-code-to-testable","text":"Functions may need to be changed or written differently. It's easy to convert an example on a blog post about writing testable code for VoltScript. Imagine the following function: Function getTimeOfDay () as String Dim nowTime as Variant nowTime = Now () If ( Hour ( Now ) < 8 ) Then getTimeOfDay = \"Night\" ElseIf ( Hour ( Now ) < 12 ) Then getTimeOfDay = \"Morning\" ElseIf ( Hour ( Now ) < 6 ) Then getTimeOfDay = \"Afternoon\" Else getTimeOfDay = \"Night\" End If End Function This function is untestable, unless you are willing to test at multiple times of day or change the system time. Rewriting the function slightly can make it eminently testable: Function getTimeOfDay ( nowTime as Variant ) as String nowTime = Now () If ( Hour ( Now ) < 8 ) Then getTimeOfDay = \"Night\" ElseIf ( Hour ( Now ) < 12 ) Then getTimeOfDay = \"Morning\" ElseIf ( Hour ( Now ) < 6 ) Then getTimeOfDay = \"Afternoon\" Else getTimeOfDay = \"Night\" End If End Function Now it can be tested easily: Dim testSuite as New BaliTestSuite(\"Testing time of day\") Dim nowTime as Variant nowTime = TimeNumber(4,30,04) ' Fine because we're only interested in the time Call testSuite.describe(\"Test Night am\").assertEqualsString(\"Night\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(8,30,04) Call testSuite.describe(\"Test Morning\").assertEqualsString(\"Morning\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(13,30,04) Call testSuite.describe(\"Test Afternoon\").assertEqualsString(\"Afternoon\", getTimeOfDay(nowTime), True) nowTime = TimeNumber(20,30,04) Call testSuite.describe(\"Test Night pm\").assertEqualsString(\"Night\", getTimeOfDay(nowTime), True)","title":"From Untestable Code to Testable"},{"location":"project-docs/index.html","text":"Project Docs Note The sample unit test output includes errors. These are not unit tests for the unit testing framework, they are samples to show the full range of output options, including failing tests, missing assertions etc. BaliDoc Bali Unit Class Documentation Unit Test Output Basic Tester Basic Tester XML output Custom Before/After Tester DateTime Tester Unit Tests Basic Tester SampleBeforeAfterTester SampleCustomTester TestBootstrap Validation with BaliUnit","title":"Index"},{"location":"project-docs/index.html#project-docs","text":"Note The sample unit test output includes errors. These are not unit tests for the unit testing framework, they are samples to show the full range of output options, including failing tests, missing assertions etc.","title":"Project Docs"},{"location":"project-docs/index.html#balidoc","text":"Bali Unit Class Documentation","title":"BaliDoc"},{"location":"project-docs/index.html#unit-test-output","text":"Basic Tester Basic Tester XML output Custom Before/After Tester DateTime Tester","title":"Unit Test Output"},{"location":"project-docs/index.html#unit-tests","text":"Basic Tester SampleBeforeAfterTester SampleCustomTester TestBootstrap Validation with BaliUnit","title":"Unit Tests"}]}