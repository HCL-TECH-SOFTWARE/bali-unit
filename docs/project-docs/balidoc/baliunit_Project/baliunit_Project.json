{"projectname":"bali-unit","comment":"","filenamebase":"baliunit_Project","fqnprefix":"","fqn":"baliunit","codesample":"","signaturecode":16384,"instancecode":16384,"signature":"Project bali-unit","modifiers":"","projectname":"bali-unit","codesamplehtml":"","commenthtml":"", "libraries":[{"label":"baliunit","comment":"VoltScript Unit Testing","filenamebase":"baliunit_Library","fqnprefix":"baliunit","fqn":"baliunit.baliunit","codesample":"","signaturecode":8192,"instancecode":8192,"scriptcreator":"Paul Withers","signature":"Library baliunit","modifiers":"","codesamplehtml":"","commenthtml":"VoltScript Unit Testing", "classes":[{"classname":"BaliTestSuite","comment":"Core unit testing suite.","filenamebase":"BaliTestSuite_ObjectClass","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.BaliTestSuite","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests 1&amp;quot;)\nDim myInt as Integer\ntestSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0\nmyInt = 1\ntestSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"D278FE46808F950D8025893400572160","lsxclassid":3,"signature":"Class BaliTestSuite","modifiers":"","classname":"BaliTestSuite","parentclass":"None","constructorsignature":"Function New(title As String) As BaliTestSuite","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests 1&amp;quot;)&amp;lt;br /&amp;gt;Dim myInt as Integer&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0&amp;lt;br /&amp;gt;myInt = 1&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds","commenthtml":"Core unit testing suite.", "methods":[{"label":"New","comment":"Constructor","valuetype":"BaliTestSuite","filenamebase":"New_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.New","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function New(title As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)","commenthtml":"Constructor", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the report","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteNew","fqn":"baliunitbaliunitBaliTestSuiteNew.title","argumentindex":1}]},{"label":"addCustomBeforeAfter","comment":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","valuetype":"BaliTestSuite","filenamebase":"addCustomBeforeAfter_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.addCustomBeforeAfter","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)\nDim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractBaliCustomBeforeAfter\nCall testSuite.addCustomBeforeAfter(beforeAfter)","signaturecode":8,"instancecode":8,"signature":"Function addCustomBeforeAfter(customBeforeAfter As AbstractBaliCustomBeforeAfter) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)&amp;lt;br /&amp;gt;Dim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;Call testSuite.addCustomBeforeAfter(beforeAfter)","commenthtml":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code", "signatureelements":["Function"], "arguments":[{"label":"customBeforeAfter","comment":"Containing before and after functions","valuetype":"AbstractBaliCustomBeforeAfter","filenamebase":"customBeforeAfter_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteaddCustomBeforeAfter","fqn":"baliunitbaliunitBaliTestSuiteaddCustomBeforeAfter.customBeforeAfter","argumentindex":1}]},{"label":"checkStarted","comment":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a BaliCustomBeforeAfter has been passed in.","filenamebase":"checkStarted_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.checkStarted","codesample":"Private Class CustomTester as AbstractBaliCustomTester\n    Function runTests as Boolean\n        Call Me.testSuite.checkStarted()\n       \n       &amp;apos; Run tests\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub checkStarted()","modifiers":"","codesamplehtml":"Private Class CustomTester as AbstractBaliCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       &amp;apos; Run tests&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class","commenthtml":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a BaliCustomBeforeAfter has been passed in.", "signatureelements":["Sub"]},{"label":"completeReport","comment":"Ends time, triggers afterAll if a BaliCustomBeforeAfter has been passed in, and prints out the report.","filenamebase":"completeReport_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.completeReport","codesample":"Sub Delete\n    Call Me.completeReport()\nEnd Sub","signaturecode":4,"instancecode":4,"signature":"Sub completeReport()","modifiers":"","codesamplehtml":"Sub Delete&amp;lt;br /&amp;gt;    Call Me.completeReport()&amp;lt;br /&amp;gt;End Sub","commenthtml":"Ends time, triggers afterAll if a BaliCustomBeforeAfter has been passed in, and prints out the report.", "signatureelements":["Sub"]},{"label":"delete","comment":"Destructor","filenamebase":"delete_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.delete","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub delete()","modifiers":"","codesamplehtml":"","commenthtml":"Destructor", "signatureelements":["Sub"]},{"label":"describe","comment":"Adds a unique description fr the next test","valuetype":"BaliTestSuite","filenamebase":"describe_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.describe","codesample":"Dim testSuite as New BaliTestSuite()\nCall testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function describe(desciption As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite()&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)","commenthtml":"Adds a unique description fr the next test", "signatureelements":["Function"], "arguments":[{"label":"desciption","comment":"Proposed description","valuetype":"String","filenamebase":"desciption_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuitedescribe","fqn":"baliunitbaliunitBaliTestSuitedescribe.desciption","argumentindex":1}]},{"label":"duration","comment":"Duration of tests","valuetype":"String","filenamebase":"duration_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.duration","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function duration() As String","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","commenthtml":"Duration of tests", "signatureelements":["Function"]},{"label":"endTimer","comment":"Sets endime to Timer","filenamebase":"endTimer_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.endTimer","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":4,"instancecode":4,"signature":"Sub endTimer()","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","commenthtml":"Sets endime to Timer", "signatureelements":["Sub"]},{"label":"getErrorMsg","comment":"Converts error message to human readable format.","valuetype":"String","filenamebase":"getErrorMsg_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.getErrorMsg","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nTry\n    Error 1502, &amp;quot;Not implemented&amp;quot;\nCatch\n   Print testSuite.getErrorMsg()\nEnd Try","signaturecode":8,"instancecode":8,"signature":"Function getErrorMsg() As String","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    Error 1502, &amp;quot;Not implemented&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;   Print testSuite.getErrorMsg()&amp;lt;br /&amp;gt;End Try","commenthtml":"Converts error message to human readable format.", "signatureelements":["Function"]},{"label":"getOutputFormat","comment":"Getter for output format, default is HTML","valuetype":"String","filenamebase":"getOutputFormat_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.getOutputFormat","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nPrint testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function getOutputFormat() As String","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;","commenthtml":"Getter for output format, default is HTML", "signatureelements":["Function"]},{"label":"includeInTestRunner","comment":"Sets this test as included in a BaliTestRunner. Called by BaliTestRunner.addTestSuite().","valuetype":"BaliTestSuite","filenamebase":"includeInTestRunner_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.includeInTestRunner","codesample":"Sub addTestSuite(testSuite as BaliTestSuite)\n    Set me.testSuites(testSuite.title) = testSuite\n    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())\nEnd Sub","signaturecode":8,"instancecode":8,"signature":"Function includeInTestRunner(testRunnerName As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Sub addTestSuite(testSuite as BaliTestSuite)&amp;lt;br /&amp;gt;    Set me.testSuites(testSuite.title) = testSuite&amp;lt;br /&amp;gt;    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())&amp;lt;br /&amp;gt;End Sub","commenthtml":"Sets this test as included in a BaliTestRunner. Called by BaliTestRunner.addTestSuite().", "signatureelements":["Function"], "arguments":[{"label":"testRunnerName","comment":"TestRunner name test is included in","valuetype":"String","filenamebase":"testRunnerName_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteincludeInTestRunner","fqn":"baliunitbaliunitBaliTestSuiteincludeInTestRunner.testRunnerName","argumentindex":1}]},{"label":"outputTo","comment":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","valuetype":"BaliTestSuite","filenamebase":"outputTo_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.outputTo","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function outputTo(outputLoc As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)","commenthtml":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write reports","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteoutputTo","fqn":"baliunitbaliunitBaliTestSuiteoutputTo.outputLoc","argumentindex":1}]},{"label":"ranSuccessfully","comment":"Whether there are errors, failures or missing assertions","valuetype":"Boolean","filenamebase":"ranSuccessfully_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.ranSuccessfully","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nDim emptyVar as Variant\nCall testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))\nIf (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function ranSuccessfully() As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim emptyVar as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))&amp;lt;br /&amp;gt;If (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;","commenthtml":"Whether there are errors, failures or missing assertions", "signatureelements":["Function"]},{"label":"runAfterEach","comment":"Tests whether a AbstractBaliCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","filenamebase":"runAfterEach_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.runAfterEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractBaliCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractBaliCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub runAfterEach()","modifiers":"","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractBaliCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class","commenthtml":"Tests whether a AbstractBaliCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.", "signatureelements":["Sub"]},{"label":"runBeforeEach","comment":"Tests whether an AbstractBaliCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","filenamebase":"runBeforeEach_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.runBeforeEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractBaliCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractBaliCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub runBeforeEach()","modifiers":"","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractBaliCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class","commenthtml":"Tests whether an AbstractBaliCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.", "signatureelements":["Sub"]},{"label":"setDisplayName","comment":"Sets the display name to show in reports.","valuetype":"BaliTestSuite","filenamebase":"setDisplayName_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.setDisplayName","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test1&amp;quot;)\nCall testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setDisplayName(displayName As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test1&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)","commenthtml":"Sets the display name to show in reports.", "signatureelements":["Function"], "arguments":[{"label":"displayName","comment":"A more readable explanation of the report. Used in XML output for Jenkins","valuetype":"String","filenamebase":"displayName_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuitesetDisplayName","fqn":"baliunitbaliunitBaliTestSuitesetDisplayName.displayName","argumentindex":1}]},{"label":"setOutputFormat","comment":"Sets the output format for the reports.","valuetype":"BaliTestSuite","filenamebase":"setOutputFormat_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.setOutputFormat","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setOutputFormat(formatType As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)","commenthtml":"Sets the output format for the reports.", "signatureelements":["Function"], "arguments":[{"label":"formatType","comment":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","valuetype":"String","filenamebase":"formatType_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuitesetOutputFormat","fqn":"baliunitbaliunitBaliTestSuitesetOutputFormat.formatType","argumentindex":1}]},{"label":"assertTrue","comment":"Tests whether the value passed is a boolean True and returns assertion outcome.","valuetype":"Boolean","filenamebase":"assertTrue_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertTrue","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))","signaturecode":8,"instancecode":8,"signature":"Function assertTrue(actual As Boolean) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))","commenthtml":"Tests whether the value passed is a boolean True and returns assertion outcome.", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertTrue","fqn":"baliunitbaliunitBaliTestSuiteassertTrue.actual","argumentindex":1}]},{"label":"assertFalse","comment":"Tests whether the value passed is a boolean False","valuetype":"Boolean","filenamebase":"assertFalse_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertFalse","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY","signaturecode":8,"instancecode":8,"signature":"Function assertFalse(actual As Boolean) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY","commenthtml":"Tests whether the value passed is a boolean False", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertFalse","fqn":"baliunitbaliunitBaliTestSuiteassertFalse.actual","argumentindex":1}]},{"label":"assertEqualsString","comment":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","valuetype":"Boolean","filenamebase":"assertEqualsString_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsString","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsString(expected As String, actual As String, caseInsensitive As Boolean) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different","commenthtml":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"String","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsString","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsString.expected","argumentindex":1},{"label":"actual","comment":"String to test","valuetype":"String","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsString","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsString.actual","argumentindex":2},{"label":"caseInsensitive","comment":"Whether to compare in current case or as lower case","valuetype":"Boolean","filenamebase":"caseInsensitive_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsString","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsString.caseInsensitive","argumentindex":3}]},{"label":"assertNotEqualString","comment":"Tests whether two strings do not match","valuetype":"Boolean","filenamebase":"assertNotEqualString_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualString","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualString(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive","commenthtml":"Tests whether two strings do not match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualString","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualString.expected","argumentindex":1},{"label":"actual","comment":"String to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualString","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualString.actual","argumentindex":2}]},{"label":"assertEqualsInteger","comment":"Tests whether two integers match","valuetype":"Boolean","filenamebase":"assertEqualsInteger_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsInteger","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 1\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 1&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","commenthtml":"Tests whether two integers match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsInteger","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsInteger.expected","argumentindex":1},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsInteger","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsInteger.actual","argumentindex":2}]},{"label":"assertNotEqualInteger","comment":"Tests whether two integers do not match","valuetype":"Boolean","filenamebase":"assertNotEqualInteger_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualInteger","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 5\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","commenthtml":"Tests whether two integers do not match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualInteger","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualInteger.expected","argumentindex":1},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualInteger","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualInteger.actual","argumentindex":2}]},{"label":"assertEqualsDouble","comment":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","valuetype":"Boolean","filenamebase":"assertEqualsDouble_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsDouble","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsDouble(expected As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)","commenthtml":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsDouble","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsDouble.expected","argumentindex":1},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsDouble","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsDouble.actual","argumentindex":2}]},{"label":"assertNotEqualDouble","comment":"Tests whether two doubles do not match, CStr-ing to avoid false positives.","valuetype":"Boolean","filenamebase":"assertNotEqualDouble_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualDouble","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualDouble(expected As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)","commenthtml":"Tests whether two doubles do not match, CStr-ing to avoid false positives.", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualDouble","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualDouble.expected","argumentindex":1},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualDouble","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualDouble.actual","argumentindex":2}]},{"label":"assertIsBetween","comment":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsBetween_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIsBetween","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)","signaturecode":8,"instancecode":8,"signature":"Function assertIsBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)","commenthtml":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test against, the actual must be greater than or equal to this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsBetween.expected1","argumentindex":1},{"label":"expected2","comment":"Upper bound to test against, the actual must be less than or equal to this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsBetween.expected2","argumentindex":2},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsBetween.actual","argumentindex":3}]},{"label":"assertIsNotBetween","comment":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsNotBetween_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIsNotBetween","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test is not between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)","signaturecode":8,"instancecode":8,"signature":"Function assertIsNotBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test is not between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)","commenthtml":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test, the actual must be less than this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsNotBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsNotBetween.expected1","argumentindex":1},{"label":"expected2","comment":"Upper bound to test, the actual must be greater than this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsNotBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsNotBetween.expected2","argumentindex":2},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsNotBetween","fqn":"baliunitbaliunitBaliTestSuiteassertIsNotBetween.actual","argumentindex":3}]},{"label":"assertIsGreaterThan","comment":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsGreaterThan_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIsGreaterThan","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test greater than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)","signaturecode":8,"instancecode":8,"signature":"Function assertIsGreaterThan(expected As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test greater than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)","commenthtml":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Lower bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsGreaterThan","fqn":"baliunitbaliunitBaliTestSuiteassertIsGreaterThan.expected","argumentindex":1},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsGreaterThan","fqn":"baliunitbaliunitBaliTestSuiteassertIsGreaterThan.actual","argumentindex":2}]},{"label":"assertIsLessThan","comment":"Tests whether a double is less than an expected value","valuetype":"Boolean","filenamebase":"assertIsLessThan_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIsLessThan","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test less than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)","signaturecode":8,"instancecode":8,"signature":"Function assertIsLessThan(expected As Double, actual As Double) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test less than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)","commenthtml":"Tests whether a double is less than an expected value", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Upper bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsLessThan","fqn":"baliunitbaliunitBaliTestSuiteassertIsLessThan.expected","argumentindex":1},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsLessThan","fqn":"baliunitbaliunitBaliTestSuiteassertIsLessThan.actual","argumentindex":2}]},{"label":"assertEqualsLong","comment":"Tests whether two Longs match","valuetype":"Boolean","filenamebase":"assertEqualsLong_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsLong","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsLong(expected As Long, actual As Long) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)","commenthtml":"Tests whether two Longs match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsLong","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsLong.expected","argumentindex":1},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsLong","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsLong.actual","argumentindex":2}]},{"label":"assertNotEqualLong","comment":"Tests whether two Longs do not match","valuetype":"Boolean","filenamebase":"assertNotEqualLong_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualLong","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualLong(expected As Long, actual As Long) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)","commenthtml":"Tests whether two Longs do not match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualLong","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualLong.expected","argumentindex":1},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualLong","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualLong.actual","argumentindex":2}]},{"label":"assertEqualsSingle","comment":"Tests whether two Single match","valuetype":"Boolean","filenamebase":"assertEqualsSingle_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsSingle","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsSingle(expected As Single, actual As Single) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)","commenthtml":"Tests whether two Single match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsSingle","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsSingle.expected","argumentindex":1},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsSingle","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsSingle.actual","argumentindex":2}]},{"label":"assertNotEqualSingle","comment":"Tests whether two Singles do not match","valuetype":"Boolean","filenamebase":"assertNotEqualSingle_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualSingle","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualSingle(expected As Single, actual As Single) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)","commenthtml":"Tests whether two Singles do not match", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualSingle","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualSingle.expected","argumentindex":1},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualSingle","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualSingle.actual","argumentindex":2}]},{"label":"assertEqualsNumeric","comment":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","valuetype":"Boolean","filenamebase":"assertEqualsNumeric_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsNumeric","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 2\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","commenthtml":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsNumeric","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsNumeric.expected","argumentindex":1},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsNumeric","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsNumeric.actual","argumentindex":2}]},{"label":"assertNotequalNumeric","comment":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","valuetype":"Boolean","filenamebase":"assertNotequalNumeric_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotequalNumeric","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 4\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertNotequalNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 4&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","commenthtml":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotequalNumeric","fqn":"baliunitbaliunitBaliTestSuiteassertNotequalNumeric.expected","argumentindex":1},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotequalNumeric","fqn":"baliunitbaliunitBaliTestSuiteassertNotequalNumeric.actual","argumentindex":2}]},{"label":"assertIs","comment":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIs_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIs","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test Is&amp;quot;)\nDim actual as String\nCall testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertIs(expectedType As String, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test Is&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as String&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)","commenthtml":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIs","fqn":"baliunitbaliunitBaliTestSuiteassertIs.expectedType","argumentindex":1},{"label":"actual","comment":"Scalar o object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIs","fqn":"baliunitbaliunitBaliTestSuiteassertIs.actual","argumentindex":2}]},{"label":"assertIsNot","comment":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIsNot_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertIsNot","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test is no&amp;quot;)\nDim a as Integer\nCall testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)","signaturecode":8,"instancecode":8,"signature":"Function assertIsNot(expectedType As String, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test is no&amp;quot;)&amp;lt;br /&amp;gt;Dim a as Integer&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)","commenthtml":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsNot","fqn":"baliunitbaliunitBaliTestSuiteassertIsNot.expectedType","argumentindex":1},{"label":"actual","comment":"Scalar or object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertIsNot","fqn":"baliunitbaliunitBaliTestSuiteassertIsNot.actual","argumentindex":2}]},{"label":"assertEqualsPrimitive","comment":"Tests two primitive variants are the same, ignoring data type and CStr-ing values","valuetype":"Boolean","filenamebase":"assertEqualsPrimitive_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsPrimitive","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test primitives&amp;quot;)\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsPrimitive(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)","commenthtml":"Tests two primitive variants are the same, ignoring data type and CStr-ing values", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitive","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitive.expected","argumentindex":1},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitive","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitive.actual","argumentindex":2}]},{"label":"assertEqualsPrimitiveOrPrimitiveArray","comment":"Tests two variant or variant arrays are the same.","valuetype":"Boolean","filenamebase":"assertEqualsPrimitiveOrPrimitiveArray_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertEqualsPrimitiveOrPrimitiveArray","codesample":"Dim testSuite As New BaliTestSuite(|Variant Array Tests|)\nDim a(7) As Variant, b() As Variant\nDim i As integer\n    \nFor i = 0 To UBound(a)\n    a(i) = i\nNext\n    \nCall testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not\n    \nReDim b(0)\nb(0) = 0\nCall testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal\n    \nReDim b(i - 1)\nFor i = 0 To UBound(b)\n    b(i) = i\nNext\nCall testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true\n    \nb(0) = 1\nCall testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite As New BaliTestSuite(|Variant Array Tests|)&amp;lt;br /&amp;gt;Dim a(7) As Variant, b() As Variant&amp;lt;br /&amp;gt;Dim i As integer&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;For i = 0 To UBound(a)&amp;lt;br /&amp;gt;    a(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;Call testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(0)&amp;lt;br /&amp;gt;b(0) = 0&amp;lt;br /&amp;gt;Call testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(i - 1)&amp;lt;br /&amp;gt;For i = 0 To UBound(b)&amp;lt;br /&amp;gt;    b(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;Call testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;b(0) = 1&amp;lt;br /&amp;gt;Call testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching","commenthtml":"Tests two variant or variant arrays are the same.", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitiveOrPrimitiveArray","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitiveOrPrimitiveArray.expected","argumentindex":1},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitiveOrPrimitiveArray","fqn":"baliunitbaliunitBaliTestSuiteassertEqualsPrimitiveOrPrimitiveArray.actual","argumentindex":2}]},{"label":"assertNotEqualPrimitiveOrPrimitiveArray","comment":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","valuetype":"Boolean","filenamebase":"assertNotEqualPrimitiveOrPrimitiveArray_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.assertNotEqualPrimitiveOrPrimitiveArray","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test primitives&amp;quot;)\nDim actual as Integer\nactual = 2\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)\nCall testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;","commenthtml":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualPrimitiveOrPrimitiveArray.expected","argumentindex":1},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","fqn":"baliunitbaliunitBaliTestSuiteassertNotEqualPrimitiveOrPrimitiveArray.actual","argumentindex":2}]},{"label":"addResult","comment":"Adds a test success or failure to the results","filenamebase":"addResult_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.addResult","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Test with Results&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)","signaturecode":4,"instancecode":4,"signature":"Sub addResult(success As Boolean, failMessage As String)","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Test with Results&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)","commenthtml":"Adds a test success or failure to the results", "signatureelements":["Sub"], "arguments":[{"label":"success","comment":"Whether the test was successful or not","valuetype":"Boolean","filenamebase":"success_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteaddResult","fqn":"baliunitbaliunitBaliTestSuiteaddResult.success","argumentindex":1},{"label":"failMessage","comment":"A message to write to explain the failure","valuetype":"String","filenamebase":"failMessage_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteaddResult","fqn":"baliunitbaliunitBaliTestSuiteaddResult.failMessage","argumentindex":2}]},{"label":"addError","comment":"Adds a test error to the results.","filenamebase":"addError_Method","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.addError","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Error Suite&amp;quot;)\nTry\n  Call testSuite.describe(&amp;quot;Error test&amp;quot;)\n  Error 1500, &amp;quot;Error thrown&amp;quot;\nCatch\n  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))\nEnd Try","signaturecode":4,"instancecode":4,"signature":"Sub addError(errorMsg As String, errorStack As Variant)","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Error Suite&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;  Call testSuite.describe(&amp;quot;Error test&amp;quot;)&amp;lt;br /&amp;gt;  Error 1500, &amp;quot;Error thrown&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))&amp;lt;br /&amp;gt;End Try","commenthtml":"Adds a test error to the results.", "signatureelements":["Sub"], "arguments":[{"label":"errorMsg","comment":"A message to explain the error","valuetype":"String","filenamebase":"errorMsg_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteaddError","fqn":"baliunitbaliunitBaliTestSuiteaddError.errorMsg","argumentindex":1},{"label":"errorStack","comment":"More detailed stack for the error","valuetype":"Variant","filenamebase":"errorStack_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteaddError","fqn":"baliunitbaliunitBaliTestSuiteaddError.errorStack","argumentindex":2}]}], "variables":[{"label":"customBeforeAfter","comment":"","valuetype":"AbstractBaliCustomBeforeAfter","filenamebase":"customBeforeAfter_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.customBeforeAfter","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public customBeforeAfter As AbstractBaliCustomBeforeAfter","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"displayName","comment":"","valuetype":"String","filenamebase":"displayName_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.displayName","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public displayName As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errors","comment":"","valuetype":"Integer","filenamebase":"errors_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.errors","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errors As Integer","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"failures","comment":"","valuetype":"Integer","filenamebase":"failures_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.failures","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public failures As Integer","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"missingAssertions","comment":"","valuetype":"Integer","filenamebase":"missingAssertions_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.missingAssertions","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public missingAssertions As Integer","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"results","comment":"","valuetype":"TestCase","filenamebase":"results_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.results","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public results List As TestCase","modifiers":"","codesamplehtml":"", "attributes":["List"], "signatureelements":["Type"]},{"label":"runTime","comment":"","valuetype":"String","filenamebase":"runTime_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.runTime","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public runTime As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"suppressReport","comment":"","valuetype":"Boolean","filenamebase":"suppressReport_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.suppressReport","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public suppressReport As Boolean","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"tests","comment":"","valuetype":"Integer","filenamebase":"tests_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.tests","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public tests As Integer","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"title","comment":"","valuetype":"String","filenamebase":"title_Variable","fqnprefix":"baliunit.baliunit.BaliTestSuite","fqn":"baliunit.baliunit.BaliTestSuite.title","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public title As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]}]},{"classname":"AbstractBaliCustomBeforeAfter","comment":"Class for custom beforeAll, beforeEach, afterEach and afterAll code.\nbeforeAll is automatically run during BaliTestSuite.isStarted() function.\nbeforeEach is automatically run by core BaliTestSuite assertions, but must be manually run in custom assertion tests.\nafterEach is automatically run by core BaliTestSuite assertions, but must be run manually in custom assertion tests.\nafterAll is automatically run during BaliTestSuite.delete() function, at the end of the scope for the BaliTestSuite.","filenamebase":"AbstractBaliCustomBeforeAfter_ObjectClass","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"CE53564B6D5B5C7A8025893400572CF2","lsxclassid":4,"signature":"Class AbstractBaliCustomBeforeAfter","modifiers":"","classname":"AbstractBaliCustomBeforeAfter","parentclass":"None","constructorsignature":"Function New() As AbstractBaliCustomBeforeAfter","codesamplehtml":"","commenthtml":"Class for custom beforeAll, beforeEach, afterEach and afterAll code.&amp;lt;br /&amp;gt;beforeAll is automatically run during BaliTestSuite.isStarted() function.&amp;lt;br /&amp;gt;beforeEach is automatically run by core BaliTestSuite assertions, but must be manually run in custom assertion tests.&amp;lt;br /&amp;gt;afterEach is automatically run by core BaliTestSuite assertions, but must be run manually in custom assertion tests.&amp;lt;br /&amp;gt;afterAll is automatically run during BaliTestSuite.delete() function, at the end of the scope for the BaliTestSuite.", "methods":[{"label":"New","comment":"","valuetype":"AbstractBaliCustomBeforeAfter","filenamebase":"New_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New() As AbstractBaliCustomBeforeAfter","modifiers":"","codesamplehtml":"","commenthtml":"", "signatureelements":["Function"]},{"label":"beforeEach","comment":"Code to run before each assertion.","filenamebase":"beforeEach_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter.beforeEach","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub beforeEach()","modifiers":"","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class","commenthtml":"Code to run before each assertion.", "signatureelements":["Sub"]},{"label":"beforeAll","comment":"Code to run before any assertion starts.","filenamebase":"beforeAll_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter.beforeAll","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub beforeAll()","modifiers":"","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class","commenthtml":"Code to run before any assertion starts.", "signatureelements":["Sub"]},{"label":"afterEach","comment":"Code to run after each assertion is completed.","filenamebase":"afterEach_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter.afterEach","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub afterEach()","modifiers":"","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class","commenthtml":"Code to run after each assertion is completed.", "signatureelements":["Sub"]},{"label":"afterAll","comment":"Code to run after all assertions have been completed.","filenamebase":"afterAll_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomBeforeAfter","fqn":"baliunit.baliunit.AbstractBaliCustomBeforeAfter.afterAll","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub afterAll()","modifiers":"","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractBaliCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class","commenthtml":"Code to run after all assertions have been completed.", "signatureelements":["Sub"]}]},{"classname":"AbstractBaliCustomTester","comment":"Class for creating custom tests, e.g. for a specific LSX.","filenamebase":"AbstractBaliCustomTester_ObjectClass","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.AbstractBaliCustomTester","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"856828E4A8408014802589340057E4BB","lsxclassid":5,"signature":"Class AbstractBaliCustomTester","modifiers":"","classname":"AbstractBaliCustomTester","parentclass":"None","constructorsignature":"Function New() As AbstractBaliCustomTester","codesamplehtml":"","commenthtml":"Class for creating custom tests, e.g. for a specific LSX.", "methods":[{"label":"New","comment":"","valuetype":"AbstractBaliCustomTester","filenamebase":"New_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomTester","fqn":"baliunit.baliunit.AbstractBaliCustomTester.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New() As AbstractBaliCustomTester","modifiers":"","codesamplehtml":"","commenthtml":"", "signatureelements":["Function"]},{"label":"addTestSuite","comment":"Loads a BaliTestSuite into the tester, in which to record the results","valuetype":"AbstractBaliCustomTester","filenamebase":"addTestSuite_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomTester","fqn":"baliunit.baliunit.AbstractBaliCustomTester.addTestSuite","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nDim tester as New DateTimeTester()   &amp;apos; Extends AbstractBaliCustomTester\nCall tester.addTestSuite(testSuite).runTests()","signaturecode":8,"instancecode":8,"signature":"Function addTestSuite(testSuite As BaliTestSuite) As AbstractBaliCustomTester","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim tester as New DateTimeTester()   &amp;apos; Extends AbstractBaliCustomTester&amp;lt;br /&amp;gt;Call tester.addTestSuite(testSuite).runTests()","commenthtml":"Loads a BaliTestSuite into the tester, in which to record the results", "signatureelements":["Function"], "arguments":[{"label":"testSuite","comment":"BaliTestSuite in which to record results","valuetype":"BaliTestSuite","filenamebase":"testSuite_ValuedElement","fqnprefix":"baliunitbaliunitAbstractBaliCustomTesteraddTestSuite","fqn":"baliunitbaliunitAbstractBaliCustomTesteraddTestSuite.testSuite","argumentindex":1}]},{"label":"runTests","comment":"Main function to run tests. Must be overridden.","valuetype":"Boolean","filenamebase":"runTests_Method","fqnprefix":"baliunit.baliunit.AbstractBaliCustomTester","fqn":"baliunit.baliunit.AbstractBaliCustomTester.runTests","codesample":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)\nDim tester as New DateTimeTester()   &amp;apos; Extends AbstractBaliCustomTester\n  \nCall tester.addTestSuite(testSuite).runTests()","signaturecode":8,"instancecode":8,"signature":"Function runTests() As Boolean","modifiers":"","codesamplehtml":"Dim testSuite as New BaliTestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim tester as New DateTimeTester()   &amp;apos; Extends AbstractBaliCustomTester&amp;lt;br /&amp;gt;  &amp;lt;br /&amp;gt;Call tester.addTestSuite(testSuite).runTests()","commenthtml":"Main function to run tests. Must be overridden.", "signatureelements":["Function"]}], "variables":[{"label":"testSuite","comment":"","valuetype":"BaliTestSuite","filenamebase":"testSuite_Variable","fqnprefix":"baliunit.baliunit.AbstractBaliCustomTester","fqn":"baliunit.baliunit.AbstractBaliCustomTester.testSuite","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public testSuite As BaliTestSuite","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]}]},{"classname":"BaliTestSuiteReport","comment":"Class for the HTML report for a BaliTestSuite","filenamebase":"BaliTestSuiteReport_ObjectClass","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.BaliTestSuiteReport","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"AFFE3042993BD96780258935003A3279","lsxclassid":6,"signature":"Class BaliTestSuiteReport","modifiers":"","classname":"BaliTestSuiteReport","parentclass":"None","constructorsignature":"Function New(outputLoc As String) As BaliTestSuiteReport","codesamplehtml":"","commenthtml":"Class for the HTML report for a BaliTestSuite", "methods":[{"label":"New","comment":"Constructor","valuetype":"BaliTestSuiteReport","filenamebase":"New_Method","fqnprefix":"baliunit.baliunit.BaliTestSuiteReport","fqn":"baliunit.baliunit.BaliTestSuiteReport.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New(outputLoc As String) As BaliTestSuiteReport","modifiers":"","codesamplehtml":"","commenthtml":"Constructor", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write the HTML or XML report to","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteReportNew","fqn":"baliunitbaliunitBaliTestSuiteReportNew.outputLoc","argumentindex":1}]},{"label":"printoutReport","comment":"Write out the actual HTML report","filenamebase":"printoutReport_Method","fqnprefix":"baliunit.baliunit.BaliTestSuiteReport","fqn":"baliunit.baliunit.BaliTestSuiteReport.printoutReport","codesample":"Sub completeReport()\n    \n    Dim testSuite as New BaliTestSuiteReport(Me.outputLoc)\n    Call testSuite.printoutReport(Me)\n    \nEnd Sub","signaturecode":4,"instancecode":4,"signature":"Sub printoutReport(testSuite As BaliTestSuite)","modifiers":"","codesamplehtml":"Sub completeReport()&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Dim testSuite as New BaliTestSuiteReport(Me.outputLoc)&amp;lt;br /&amp;gt;    Call testSuite.printoutReport(Me)&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;End Sub","commenthtml":"Write out the actual HTML report", "signatureelements":["Sub"], "arguments":[{"label":"testSuite","comment":"Test suite to write out","valuetype":"BaliTestSuite","filenamebase":"testSuite_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestSuiteReportprintoutReport","fqn":"baliunitbaliunitBaliTestSuiteReportprintoutReport.testSuite","argumentindex":1}]}]},{"classname":"BaliTestRunner","comment":"Wrapper for outputting an index.htm for multiple BaliTestSuites","filenamebase":"BaliTestRunner_ObjectClass","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.BaliTestRunner","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"2709F2D6CCA8EA6880258935003A6AA6","lsxclassid":7,"signature":"Class BaliTestRunner","modifiers":"","classname":"BaliTestRunner","parentclass":"None","constructorsignature":"Function New(title As String) As BaliTestRunner","codesamplehtml":"","commenthtml":"Wrapper for outputting an index.htm for multiple BaliTestSuites", "methods":[{"label":"New","comment":"Constructor","valuetype":"BaliTestRunner","filenamebase":"New_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.New","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function New(title As String) As BaliTestRunner","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)","commenthtml":"Constructor", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the test run","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestRunnerNew","fqn":"baliunitbaliunitBaliTestRunnerNew.title","argumentindex":1}]},{"label":"addTestSuite","comment":"Adds a BaliTestSuite to this BaliTestRunner","filenamebase":"addTestSuite_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.addTestSuite","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nDim testSuite as New BaliTestSuite(&amp;quot;Tests1&amp;quot;)\nCall testRunner.addTestSuite(testSuite)","signaturecode":4,"instancecode":4,"signature":"Sub addTestSuite(testSuite As BaliTestSuite)","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim testSuite as New BaliTestSuite(&amp;quot;Tests1&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.addTestSuite(testSuite)","commenthtml":"Adds a BaliTestSuite to this BaliTestRunner", "signatureelements":["Sub"], "arguments":[{"label":"testSuite","comment":"BaliTestSuite to add to this BaliTestRunner","valuetype":"BaliTestSuite","filenamebase":"testSuite_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestRunneraddTestSuite","fqn":"baliunitbaliunitBaliTestRunneraddTestSuite.testSuite","argumentindex":1}]},{"label":"createTestSuite","comment":"Creates a new BaliTestSuite with a label and adds it to this BaliTestRunner","valuetype":"BaliTestSuite","filenamebase":"createTestSuite_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.createTestSuite","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nDim currentSuite as BaliTestSuite\nSet currentSuite = testRunner.createTestSuite(&amp;quot;Tests1&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function createTestSuite(title As String) As BaliTestSuite","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim currentSuite as BaliTestSuite&amp;lt;br /&amp;gt;Set currentSuite = testRunner.createTestSuite(&amp;quot;Tests1&amp;quot;)","commenthtml":"Creates a new BaliTestSuite with a label and adds it to this BaliTestRunner", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the test suite","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestRunnercreateTestSuite","fqn":"baliunitbaliunitBaliTestRunnercreateTestSuite.title","argumentindex":1}]},{"label":"Delete","comment":"Destructor. Prints out reports and erases test suites List.","filenamebase":"Delete_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.Delete","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub Delete()","modifiers":"","codesamplehtml":"","commenthtml":"Destructor. Prints out reports and erases test suites List.", "signatureelements":["Sub"]},{"label":"getFilePath","comment":"Gets the directory to save the HTML / XML output to.","valuetype":"String","filenamebase":"getFilePath_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.getFilePath","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nPrint &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","signaturecode":8,"instancecode":8,"signature":"Function getFilePath() As String","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","commenthtml":"Gets the directory to save the HTML / XML output to.", "signatureelements":["Function"]},{"label":"getOutputFormat","comment":"Getter for the output format, default is HTML.","valuetype":"String","filenamebase":"getOutputFormat_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.getOutputFormat","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nPrint &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","signaturecode":8,"instancecode":8,"signature":"Function getOutputFormat() As String","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","commenthtml":"Getter for the output format, default is HTML.", "signatureelements":["Function"]},{"label":"outputTo","comment":"Sets a directory to write reports to.","valuetype":"BaliTestRunner","filenamebase":"outputTo_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.outputTo","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nCall testRunner.outputTo(&amp;quot;unit-tests/&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function outputTo(outputLoc As String) As BaliTestRunner","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.outputTo(&amp;quot;unit-tests/&amp;quot;)","commenthtml":"Sets a directory to write reports to.", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write reports","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestRunneroutputTo","fqn":"baliunitbaliunitBaliTestRunneroutputTo.outputLoc","argumentindex":1}]},{"label":"setOutputFormat","comment":"Sets the output format for the reports","valuetype":"BaliTestRunner","filenamebase":"setOutputFormat_Method","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.setOutputFormat","codesample":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)\nCall testRunner.setOutputFormat(&amp;quot;BOTH&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setOutputFormat(formatType As String) As BaliTestRunner","modifiers":"","codesamplehtml":"Dim testRunner as New BaliTestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.setOutputFormat(&amp;quot;BOTH&amp;quot;)","commenthtml":"Sets the output format for the reports", "signatureelements":["Function"], "arguments":[{"label":"formatType","comment":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","valuetype":"String","filenamebase":"formatType_ValuedElement","fqnprefix":"baliunitbaliunitBaliTestRunnersetOutputFormat","fqn":"baliunitbaliunitBaliTestRunnersetOutputFormat.formatType","argumentindex":1}]}], "variables":[{"label":"testSuites","comment":"","valuetype":"BaliTestSuite","filenamebase":"testSuites_Variable","fqnprefix":"baliunit.baliunit.BaliTestRunner","fqn":"baliunit.baliunit.BaliTestRunner.testSuites","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public testSuites List As BaliTestSuite","modifiers":"","codesamplehtml":"", "attributes":["List"], "signatureelements":["Type"]}]}], "types":[{"classname":"TestCase","comment":"Type used to hold results of an individual unit test.","filenamebase":"TestCase_ObjectType","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.TestCase","codesample":"Dim testCase as New TestCase()\ntestCase.description = &amp;quot;My way cool test&amp;quot;\ntestCase.outcome = &amp;quot;Failed&amp;quot;\ntestCase.errorMsg = &amp;quot;Expected: 200, but was: 100&amp;quot;","signaturecode":64,"instancecode":64,"projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"82176E8FB4C177998025893400570617","lsxclassid":2,"signature":"Type TestCase","modifiers":"","classname":"TestCase","codesamplehtml":"Dim testCase as New TestCase()&amp;lt;br /&amp;gt;testCase.description = &amp;quot;My way cool test&amp;quot;&amp;lt;br /&amp;gt;testCase.outcome = &amp;quot;Failed&amp;quot;&amp;lt;br /&amp;gt;testCase.errorMsg = &amp;quot;Expected: 200, but was: 100&amp;quot;","commenthtml":"Type used to hold results of an individual unit test.", "variables":[{"label":"description","comment":"","valuetype":"String","filenamebase":"description_Variable","fqnprefix":"baliunit.baliunit.TestCase","fqn":"baliunit.baliunit.TestCase.description","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public description As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"outcome","comment":"","valuetype":"String","filenamebase":"outcome_Variable","fqnprefix":"baliunit.baliunit.TestCase","fqn":"baliunit.baliunit.TestCase.outcome","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public outcome As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errorMsg","comment":"","valuetype":"String","filenamebase":"errorMsg_Variable","fqnprefix":"baliunit.baliunit.TestCase","fqn":"baliunit.baliunit.TestCase.errorMsg","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errorMsg As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errorStack","comment":"","valuetype":"String","filenamebase":"errorStack_Variable","fqnprefix":"baliunit.baliunit.TestCase","fqn":"baliunit.baliunit.TestCase.errorStack","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errorStack As String","modifiers":"","codesamplehtml":"", "signatureelements":["Type"]}]}], "variables":[{"label":"BASE_REPORT_LOC","comment":"","valuetype":"String","filenamebase":"BASEREPORTLOC_Variable","fqnprefix":"baliunit.baliunit","fqn":"baliunit.baliunit.BASE_REPORT_LOC","codesample":"","signaturecode":64,"instancecode":64,"signature":"Const BASE_REPORT_LOC As String","modifiers":"","codesamplehtml":"", "attributes":["Const"], "signatureelements":["Type"]}]}]}
